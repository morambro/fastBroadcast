package it.unipd.testbase.gui;

import it.unipd.testbase.AppController;
import it.unipd.testbase.eventdispatcher.EventDispatcher;
import it.unipd.testbase.eventdispatcher.event.IEvent;
import it.unipd.testbase.eventdispatcher.event.gui.UpdateStatusEvent;
import it.unipd.testbase.eventdispatcher.event.protocol.ResetSimulationEvent;
import it.unipd.testbase.eventdispatcher.event.protocol.SendAlertMessageEvent;
import it.unipd.testbase.eventdispatcher.event.protocol.SendBroadcastMessageEvent;
import it.unipd.testbase.eventdispatcher.event.protocol.StopSimulationEvent;
import it.unipd.testbase.helper.Log;
import it.unipd.testbase.helper.LogPrinter;
import it.unipd.testbase.wificonnection.message.IMessage;
import it.unipd.testbase.wificonnection.message.MessageBuilder;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.text.DefaultCaret;

/**
 *
 * @author Fabio De Gaspari
 */
public class Gui extends javax.swing.JFrame implements IGuiComponent {
	protected static final String TAG = "it.unipd.testbase";
	private List<CarWidget> cars = new ArrayList<CarWidget>();
	private int curCar = -1;

	private static final long serialVersionUID = 1L;
	/**
	 * Creates new form NewJFrame
	 */
	public Gui() {
		initComponents();
		DefaultCaret caret = (DefaultCaret)receivedMsgTxt.getCaret();
		caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
		setVisible(true);
		register();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jPanel1 = new javax.swing.JPanel();
		upperScrlPane = new javax.swing.JScrollPane();
		jPanel3 = new javax.swing.JPanel();
		jPanel2 = new javax.swing.JPanel();
		setupBtn = new javax.swing.JButton();
		startSimBtn = new javax.swing.JButton();
		resetBtn = new JButton();
		deviceNumber = new JLabel("0");
		lowerScrlPane = new javax.swing.JScrollPane();
		receivedMsgTxt = new javax.swing.JTextArea();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		jPanel3.setLayout(new WrapLayout(WrapLayout.LEFT));

		upperScrlPane.setViewportView(jPanel3);

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(
				jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(upperScrlPane)
				);
		jPanel1Layout.setVerticalGroup(
				jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup()
						.addComponent(upperScrlPane, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(0, 0, Short.MAX_VALUE))
				);

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout.setHorizontalGroup(
				jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel2Layout.createSequentialGroup()
						.addComponent(setupBtn)
						.addGap(26, 26, 26)
						.addComponent(startSimBtn)
						.addGap(32, 32, 32)
						.addComponent(deviceNumber)
						.addGap(36, 36, 36)
						.addComponent(resetBtn)
						.addGap(0, 313, Short.MAX_VALUE))
				);
		jPanel2Layout.setVerticalGroup(
				jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
						.addGap(0, 12, Short.MAX_VALUE)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(setupBtn)
								.addComponent(startSimBtn)
								.addComponent(resetBtn)
								.addComponent(deviceNumber)))
				);

		receivedMsgTxt.setColumns(20);
		receivedMsgTxt.setRows(5);
		lowerScrlPane.setViewportView(receivedMsgTxt);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addComponent(lowerScrlPane)
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addComponent(lowerScrlPane, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
				);

		pack();
		setupButtons();
		//        curCar++;
		//		CarWidget cw = new CarWidget();
		//		cw.setState(CarWidget.STATE_WAITING);
		//		cars.add(cw);
		//		jPanel3.add(cw);
		//		cw.setVisible(true);
		//		jPanel3.revalidate();
		//		jPanel3.validate();
		//		jPanel3.repaint();
		setMinimumSize(new Dimension(700, 570));

	}// </editor-fold>//GEN-END:initComponents

	private void setupButtons() {
		setupBtn.setToolTipText("Setup simulation. Use only when all computers are already running the application");
		setupBtn.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				AppController.setMaster();
				IMessage message = MessageBuilder.getInstance().getMessage(IMessage.BEGIN_SETUP_FASE, "");
				message.prepare();
				EventDispatcher.getInstance().triggerEvent(new SendBroadcastMessageEvent(message));
				setupBtn.setEnabled(false);
			}
		});


		setupBtn.setText("Setup simulation");
		startSimBtn.setText("Start simulation");
		resetBtn.setText("Reset Simulation");
		startSimBtn.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				EventDispatcher.getInstance().triggerEvent(new SendAlertMessageEvent(0));
				startSimBtn.setEnabled(false);
			}
		});
		startSimBtn.setEnabled(false);
		resetBtn.setEnabled(false);

		resetBtn.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				reset();
				IMessage msg = MessageBuilder.getInstance().getMessage(IMessage.RESET_SIMULATION_TYPE, ""+AppController.getApplicatonRunID());
				msg.prepare();
				EventDispatcher.getInstance().triggerEvent(new SendBroadcastMessageEvent(msg));
				EventDispatcher.getInstance().triggerEvent(new ResetSimulationEvent());
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton setupBtn;
	private javax.swing.JButton startSimBtn;
	private javax.swing.JButton resetBtn;
	private JLabel deviceNumber;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JScrollPane lowerScrlPane;
	private javax.swing.JScrollPane upperScrlPane;
	private javax.swing.JTextArea receivedMsgTxt;
	// End of variables declaration//GEN-END:variables

	@Override
	public void handle(IEvent event) {
		if(event instanceof UpdateStatusEvent)
		{
			UpdateStatusEvent ev = (UpdateStatusEvent) event;
			switch(ev.type) {

			case UpdateStatusEvent.GUI_UPDATE_NEW_MESSAGE:
				receivedMsgTxt.append("\n"+ev.obj.toString());
				break;
			case UpdateStatusEvent.GUI_UPDATE_CONT_WINDOW_START:
				addCar((Integer[])ev.obj);
				break;
			case UpdateStatusEvent.GUI_UPDATE_MESSAGE_FORWARDED:
				if(cars.size()>curCar && curCar>=0)
					cars.get(curCar).setState(CarWidget.STATE_FORWARDED);
				break;
			case UpdateStatusEvent.GUI_UPDATE_MESSAGE_NOT_FORWARDED:
				if(cars.size()>curCar && curCar>=0)
				cars.get(curCar).setState(CarWidget.STATE_DEAD);
				break;
			case UpdateStatusEvent.GUI_UPDATE_ADD_PEER:
				int old = Integer.valueOf(deviceNumber.getText());
				if(ev.obj == null)
					old++;
				else
					old = (Integer) old;
				deviceNumber.setText(""+old);
				deviceNumber.validate();
				break;
			case UpdateStatusEvent.GUI_UPDATE_UNLOCK:
				setupBtn.setEnabled(false);
				startSimBtn.setEnabled(true);
				Log.d("", "Unlock");
				break;
			case UpdateStatusEvent.GUI_UPDATE_LOCK:
				setupBtn.setEnabled(false);
				startSimBtn.setEnabled(false);
				break;
			}
		}
		if(event instanceof ResetSimulationEvent) {
			reset();
		}
		if(event instanceof StopSimulationEvent) {
			resetBtn.setEnabled(true);
		}
	}

	private void reset() {
		resetBtn.setEnabled(false);
		cars = new ArrayList<CarWidget>();
		curCar = -1;
		jPanel3.removeAll();
		jPanel3.setLayout(new WrapLayout(WrapLayout.LEFT));
		jPanel3.validate();
		jPanel3.repaint();
		startSimBtn.setEnabled(true);
	}

	private void addCar(Integer[] vals) {
		curCar++;
		CarWidget cw = new CarWidget();
		cw.setState(CarWidget.STATE_ACTIVE);
		cw.setContentionWindow(vals[0], vals[1]);
		cars.add(cw);
		jPanel3.add(cw);
		cw.setVisible(true);
		jPanel3.revalidate();
		jPanel3.validate();
		jPanel3.repaint();
	}

	@Override
	public void register() {
		List<Class<? extends IEvent>> events = new ArrayList<Class<? extends IEvent>>();
		events.add(UpdateStatusEvent.class);
		events.add(StopSimulationEvent.class);
		events.add(ResetSimulationEvent.class);
		EventDispatcher.getInstance().registerComponent(this, events);
	}
}
